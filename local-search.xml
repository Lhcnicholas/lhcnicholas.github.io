<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ssh使用代理访问Github</title>
    <link href="/2023/05/10/ssh%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEGithub/"/>
    <url>/2023/05/10/ssh%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEGithub/</url>
    
    <content type="html"><![CDATA[<p>平时在GitHub上看到一些有意思的开源项目，或者自己的代码，想拉下来，结果因为种种原因很难拉下来，这时候就需要用到代理。</p><h3 id="HTTP协议拉取代码"><a href="#HTTP协议拉取代码" class="headerlink" title="HTTP协议拉取代码"></a>HTTP协议拉取代码</h3><p>如果使用http协议拉取代码还好说，一行代码就搞定了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br></code></pre></td></tr></table></figure><p>或者直接把这串配到<code>.zshrc</code>里面去，都可以，这样就不需要每次都敲一遍了。</p><h3 id="SSH协议拉取代码"><a href="#SSH协议拉取代码" class="headerlink" title="SSH协议拉取代码"></a>SSH协议拉取代码</h3><p>但是呢，使用使用http协议拉取代码总要输入密码，就很麻烦，这时候SSH就登场了。</p><p>SSH设置代理的方式稍微复杂一点，不过也就一点点🤏。</p><ol><li><p>我们要在<code>～/.ssh</code>目录下创建一个<code>config</code>文件，名字就叫config，无后缀。</p></li><li><p>在<code>config</code>文件里面配置如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">Host github.com<br>  User git<br>  HostName ssh.github.com<br>  Port 443<br>  ProxyCommand nc -v -x 127.0.0.1:7890 %h %p<br>  IdentitiesOnly <span class="hljs-built_in">yes</span><br>  IdentityFile ~/.ssh/github_rsa<br></code></pre></td></tr></table></figure></li><li><p>配置好之后我们可以用<code> ssh -T git@github.com</code> 这个命令来测试一下，正常情况下会有如下响应。</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"> ~ ssh -T git@github.com<br>Connection to ssh.github.com port 443 [tcp/https] succeeded!<br>Hi Lhcnicholas! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p><code>User git</code> ：这个是固定的</p><p><code>HostName ssh.github.com</code>：在使用443端口情况下主机名为<code>ssh.github.com</code></p><p><code>Port 443</code>: 22端口有时会因为各种原因连不上，所以我们用443端口，稳一些</p><p><code>ProxyCommand nc -v -x 127.0.0.1:7890 %h %p</code>: 中间是你的代理地址，具体命令每一个参数什么意思，不用太在意（主要我自己也说不太清）</p><p><code>IdentitiesOnly yes</code>: 是否只用指定的标识文件来验证身份，不再尝试其他方式（可有可无，影响不大）</p><p><code>IdentityFile ~/.ssh/github_rsa</code>: 你的标识文件的目录地址（私钥地址，不是公钥）。</p><blockquote><p>参考：<a href="https://hellodk.cn/post/975">GitHub 加速终极教程(大佬)</a></p><p>参考：<a href="https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">在HTTPS端口使用SSH</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Alfred Workflow获取Google Authenticator动态密码</title>
    <link href="/2023/05/09/%E5%88%A9%E7%94%A8Alfred-Workflow%E8%8E%B7%E5%8F%96Google-Authenticator%E5%8A%A8%E6%80%81%E5%AF%86%E7%A0%81/"/>
    <url>/2023/05/09/%E5%88%A9%E7%94%A8Alfred-Workflow%E8%8E%B7%E5%8F%96Google-Authenticator%E5%8A%A8%E6%80%81%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>公司的跳板机登陆需要用到Google Authenticator，每次都要掏出手机，找到App，对着密码一个一个数字敲，就很麻烦，就想着，就不能所有操作都在电脑上吗？功夫不负有心人，经过一番Google，终于找到了一个办法。</p><p>原来Google Authenticator使用的是公开的TOTP(Time-based One-Time Password)算法，而且现在已经有开源项目可以提取密钥了，那事情就简单了。</p><h2 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h2><ol><li><p>手机上通过Google Authenticator的导出功能，导出密钥对应的二维码。</p></li><li><p>使用相机或者微信去识别这个二维码，会得到一串代码，类似：otpauth-migration:&#x2F;&#x2F;offline?data&#x3D;…</p></li><li><p>使用<a href="https://github.com/scito/extract_otp_secrets">ExtractOtpSecrets</a>来提取密钥</p></li><li><p>将得到的密钥填入到workflow中。</p><p><img src="https://lhc-img.oss-cn-hangzhou.aliyuncs.com/image-20230509175720274.png" alt="image-2023050917572027"></p></li><li><p>Alfred中输入<code>gga</code>获取你的动态密码吧。</p></li></ol><p><img src="https://lhc-img.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-05-09%2017.57.52.png" alt="截屏2023-05-09 17.57.5"></p><p>附：Workflow下载地址: <a href="http://lhc-app.oss-cn-hangzhou.aliyuncs.com/GoogleAuth.alfredworkflow">下载地址</a></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/362783435">https://zhuanlan.zhihu.com/p/362783435</a></p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Alfred</tag>
      
      <tag>Worflow</tag>
      
      <tag>Google Authenticator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac打不开应用，显示“文件已损坏”</title>
    <link href="/2023/05/09/mac-xattr/"/>
    <url>/2023/05/09/mac-xattr/</url>
    
    <content type="html"><![CDATA[<p>平时在网上下载的应用，由于不是在苹果商店里购买的，经常会出现抱错，“文件已损坏”。这时候就很头疼。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决办法很简单，一行命令就搞定了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo xattr -rd com.apple.quarantine &#123;&#123;file_path&#125;&#125;<br></code></pre></td></tr></table></figure><p>引用一段AI的回答。</p><blockquote><p>这是一个在MacOS上的shell命令，用于从文件或目录中删除隔离属性（quarantine attribute）。隔离属性是操作系统为从互联网下载或从其他来源接收的文件添加的一种安全措施，以防止用户意外执行可能有害的代码。<br><br>命令<code>sudo xattr -rd com.apple.quarantine &#123;&#123;file_path&#125;&#125;</code>将从指定的文件或目录中删除隔离属性，使其可以在没有任何警告或限制的情况下执行。<code>sudo</code>命令用于以管理员权限运行命令，这可能取决于文件的权限。<code>-r</code>选项用于递归地从指定目录中删除属性，<code>-d</code>选项用于从目录本身中删除属性。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Xattr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2023/04/03/My-new-Post/"/>
    <url>/2023/04/03/My-new-Post/</url>
    
    <content type="html"><![CDATA[<p>时隔多年，又开始搞博客了。</p><p>大学的时候，短暂的搞过一段时间，当时就是单纯的对自建博客这个东西很好奇。就感觉，哇，好奇妙啊，它就这么展示在了自己的眼前，太不可思议了。那是一种对于技术的好奇，而对于写博客这个事情，其实我当时并没有什么兴趣，也不知道要写些什么东西。最后也就不了了知，没几年就不再续费了，当年的代码后来也找不到了。</p><p>只是可惜了当年购买的域名，<code>niczo.com</code>, 我还挺喜欢这个域名的，简短，好记。现在想再买回来可就难了，已经在域名贩子手里了，要买回来得一两万……，一口老血吐到屏幕上。</p><p>这次多写写吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>First</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
