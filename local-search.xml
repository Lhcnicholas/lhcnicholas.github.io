<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Dubbo反序列化变成HashMap</title>
    <link href="/2023/08/09/Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%98%E6%88%90HashMap/"/>
    <url>/2023/08/09/Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%98%E6%88%90HashMap/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前一阵遇到一个很有意思的问题，Dubbo客户端调用服务端接口，报错了，抛了一个异常，结果到了客户端这边，却变成了一个HashMap，而HashMap里面存放的正是报错信息！</p><p>当时的第一反应就是不可能，这不可能。</p><h3 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h3><p>虽然嘴上说不可能，但是事实就摆在眼前，没办法，也只能接受这个现实。那接下来就是漫长的排查问题了（其实也还好，就一个多小时）。</p><p>经过漫长的排查，最终定位到了Hessian中的ClassFactory这个类。ClassFactory这个类看名字就知道干什么的了，负责类的加载。当我们调用Dubbo接口返回结果时，就是通过这个类来加载类信息的。</p><p>我们可以看下它的加载代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; load(String className) <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-keyword">if</span> (isAllow(className)) &#123;<br>        <span class="hljs-keyword">return</span> Class.forName(className, <span class="hljs-literal">false</span>, _loader);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        log.log(Level.SEVERE, className + <span class="hljs-string">&quot; in blacklist or not in whitelist, deserialization  with type &#x27;HashMap&#x27; instead.&quot;</span>);<br>        <span class="hljs-keyword">return</span> HashMap.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码上，我们就能看出来，当指定的类不被允许时，就会返回HashMap类信息。</p><p>但是为什么我们的类不被允许加载呢？？？</p><p>继续看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAllow</span><span class="hljs-params">(String className)</span><br>&#123;<br>    ArrayList&lt;Allow&gt; allowList = _allowList;<br>    LinkedList&lt;Allow&gt; allowList = _allowList;<br><br>    <span class="hljs-keyword">if</span> (allowList == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (_allowClassSet.containsKey(className)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> allowList.size();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-type">Allow</span> <span class="hljs-variable">allow</span> <span class="hljs-operator">=</span> allowList.get(i);<br><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isAllow</span> <span class="hljs-operator">=</span> allow.allow(className);<br><br>        <span class="hljs-keyword">if</span> (isAllow != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (isAllow) &#123;<br>                _allowClassSet.put(className, className);<br>            &#125;<br>            <span class="hljs-keyword">return</span> isAllow;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (_isWhitelist) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    _allowClassSet.put(className, className);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br>    _staticAllowList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Allow&gt;();<br><br>    _staticAllowList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Allow</span>(<span class="hljs-string">&quot;java\\..+&quot;</span>, <span class="hljs-literal">true</span>));<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassFactory.class.getClassLoader();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 看这里，看这里</span><br>        String[] denyClasses = readLines(classLoader.getResourceAsStream(<span class="hljs-string">&quot;DENY_CLASS&quot;</span>));<br>        <span class="hljs-keyword">for</span> (String denyClass : denyClasses) &#123;<br>            <span class="hljs-keyword">if</span> (denyClass.startsWith(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            _staticAllowList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AllowPrefix</span>(denyClass, <span class="hljs-literal">false</span>));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ignore) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上述代码，我们可以看到，Hessian在内部维护了一份DENY_CLASS名单。如果你的结果类在这个名单里面或者父类在这个名单里面(通过类路径匹配)，抱歉，你只能获得一份HashMap。</p><p>解决办法也很简单，避开这份名单就好。</p><blockquote><p>参考: <a href="https://github.com/apache/dubbo-hessian-lite/commit/8d49db4128aea8fc6e469a25e19b4d50af91e0bd">Add Default Deny List</a></p><p>参考: <a href="https://blog.csdn.net/include_voidmain/article/details/128476795">CVE-2022-39198 Apache Dubbo Hession Deserialization分析</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>Hession</tag>
      
      <tag>HashMap</tag>
      
      <tag>Java</tag>
      
      <tag>DENY_CLASS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac上用Docker安装Redis集群</title>
    <link href="/2023/08/09/Mac%E4%B8%8A%E7%94%A8Docker%E5%AE%89%E8%A3%85Redis%E9%9B%86%E7%BE%A4/"/>
    <url>/2023/08/09/Mac%E4%B8%8A%E7%94%A8Docker%E5%AE%89%E8%A3%85Redis%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前一阵闲来无事，想自己装个Redis集群玩玩，结果发现还挺费劲，中间遇到了不少麻烦，遂记录一下。</p><h3 id="Docker-Compose配置"><a href="#Docker-Compose配置" class="headerlink" title="Docker Compose配置"></a>Docker Compose配置</h3><p>使用的是Docker Compose，配置文件如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">redis-cluster:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br>    <span class="hljs-attr">ipam:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">subnet:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">node1:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-cluster-1</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6371</span><span class="hljs-string">:6371</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">16371</span><span class="hljs-string">:16371</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./compose/redis/redis-cluster.conf:/etc/redis.conf</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/etc/redis.conf&quot;</span>]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">redis-cluster:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>  <span class="hljs-attr">node2:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-cluster-2</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6372</span><span class="hljs-string">:6372</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">16372</span><span class="hljs-string">:16372</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./compose/redis/redis-cluster-2.conf:/etc/redis.conf</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/etc/redis.conf&quot;</span>]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">redis-cluster:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">node3:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-cluster-3</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6373</span><span class="hljs-string">:6373</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">16373</span><span class="hljs-string">:16373</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./compose/redis/redis-cluster-3.conf:/etc/redis.conf</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/etc/redis.conf&quot;</span>]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">redis-cluster:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span><br>  <span class="hljs-attr">node4:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-cluster-4</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6374</span><span class="hljs-string">:6374</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">16374</span><span class="hljs-string">:16374</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./compose/redis/redis-cluster-4.conf:/etc/redis.conf</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/etc/redis.conf&quot;</span>]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">redis-cluster:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span><br>  <span class="hljs-attr">node5:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-cluster-5</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6375</span><span class="hljs-string">:6375</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">16375</span><span class="hljs-string">:16375</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./compose/redis/redis-cluster-5.conf:/etc/redis.conf</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/etc/redis.conf&quot;</span>]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">redis-cluster:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.5</span><br>  <span class="hljs-attr">node6:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis-cluster-6</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6376</span><span class="hljs-string">:6376</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">16376</span><span class="hljs-string">:16376</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./compose/redis/redis-cluster-6.conf:/etc/redis.conf</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/etc/redis.conf&quot;</span>]<br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-attr">redis-cluster:</span><br>        <span class="hljs-attr">ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span><br><br></code></pre></td></tr></table></figure><p>要注意，我们要保证所有的redis节点都在同一个网络里，保证互相访问畅通。并且，这里我们要使用静态IP，因为后面创建集群的时候，它不支持使用节点名称访问，只能用IP。</p><h3 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h3><p>Redis集群模式下，Redis配置文件也是需要做一些修改的。</p><p>先看配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 端口号（因为要映射到宿主机，端口不能重复）</span><br>port 6371～6376<br><span class="hljs-comment"># 开启集群模式</span><br>cluster-enabled <span class="hljs-built_in">yes</span><br><br><span class="hljs-comment"># 集群配置文件名，随便取个名字就好</span><br>cluster-config-file nodes.conf<br><br><span class="hljs-comment"># Docker NAT网络模式下，需要配置Redis集群节点对外暴露的IP和Port</span><br><span class="hljs-comment"># 这里我用的是宿主机IP，如果用Redis集群局域网IP的话，那这个集群就只能内部玩了，外面是无法正常使用的。</span><br>cluster-announce-ip 10.1.62.101<br>cluster-announce-port 6376<br></code></pre></td></tr></table></figure><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>各个Redis节点都启动成功后，随便进入一个Redis节点中，执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  yaml $ docker <span class="hljs-built_in">exec</span> -it redis-cluster-1 bash<br>root@a7875167255d:/data<span class="hljs-comment"># redis-cli --cluster create 10.1.62.101:6371 10.1.62.101:6372 10.1.62.101:6373</span><br>&gt;&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 3 nodes...<br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>M: 827efbbd222514e9310690c6d0c8013ca473935b 10.1.62.101:6371<br>   slots:[0-5460] (5461 slots) master<br>M: edd79c53980d8f56581a156d54db0ffad5f69bdb 10.1.62.101:6372<br>   slots:[5461-10922] (5462 slots) master<br>M: 70e470e76a1fb102a37da6507358cca6f276924a 10.1.62.101:6373<br>   slots:[10923-16383] (5461 slots) master<br>Can I <span class="hljs-built_in">set</span> the above configuration? (<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;yes&#x27;</span> to accept): <span class="hljs-built_in">yes</span><br>&gt;&gt;&gt; Nodes configuration updated<br>&gt;&gt;&gt; Assign a different config epoch to each node<br>&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster<br>Waiting <span class="hljs-keyword">for</span> the cluster to <span class="hljs-built_in">join</span><br>.<br>&gt;&gt;&gt; Performing Cluster Check (using node 10.1.62.101:6371)<br>M: 827efbbd222514e9310690c6d0c8013ca473935b 10.1.62.101:6371<br>   slots:[0-5460] (5461 slots) master<br>M: edd79c53980d8f56581a156d54db0ffad5f69bdb 10.1.62.101:6372<br>   slots:[5461-10922] (5462 slots) master<br>M: 70e470e76a1fb102a37da6507358cca6f276924a 10.1.62.101:6373<br>   slots:[10923-16383] (5461 slots) master<br>[OK] All nodes agree about slots configuration.<br>&gt;&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...<br>&gt;&gt;&gt; Check slots coverage...<br>[OK] All 16384 slots covered.<br></code></pre></td></tr></table></figure><p>当你看到<code> [OK] All 16384 slots covered.</code> 的时候，就说明咱们的集群创建成功了。</p><h3 id="试一试"><a href="#试一试" class="headerlink" title="试一试"></a>试一试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@a7875167255d:/data<span class="hljs-comment"># redis-cli -c -p 6371</span><br>127.0.0.1:6371&gt; <span class="hljs-built_in">set</span> name nic<br>-&gt; Redirected to slot [5798] located at 10.1.62.101:6372<br>OK<br>10.1.62.101:6372&gt; <span class="hljs-built_in">set</span> age 18<br>-&gt; Redirected to slot [741] located at 10.1.62.101:6371<br>OK<br>10.1.62.101:6371&gt; keys *<br>1) <span class="hljs-string">&quot;age&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh使用代理访问Github</title>
    <link href="/2023/05/10/ssh%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEGithub/"/>
    <url>/2023/05/10/ssh%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEGithub/</url>
    
    <content type="html"><![CDATA[<p>平时在GitHub上看到一些有意思的开源项目，或者自己的代码，想拉下来，结果因为种种原因很难拉下来，这时候就需要用到代理。</p><h3 id="HTTP协议拉取代码"><a href="#HTTP协议拉取代码" class="headerlink" title="HTTP协议拉取代码"></a>HTTP协议拉取代码</h3><p>如果使用http协议拉取代码还好说，一行代码就搞定了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890<br></code></pre></td></tr></table></figure><p>或者直接把这串配到<code>.zshrc</code>里面去，都可以，这样就不需要每次都敲一遍了。</p><h3 id="SSH协议拉取代码"><a href="#SSH协议拉取代码" class="headerlink" title="SSH协议拉取代码"></a>SSH协议拉取代码</h3><p>但是呢，使用使用http协议拉取代码总要输入密码，就很麻烦，这时候SSH就登场了。</p><p>SSH设置代理的方式稍微复杂一点，不过也就一点点🤏。</p><ol><li><p>我们要在<code>～/.ssh</code>目录下创建一个<code>config</code>文件，名字就叫config，无后缀。</p></li><li><p>在<code>config</code>文件里面配置如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">Host github.com<br>  User git<br>  HostName ssh.github.com<br>  Port 443<br>  ProxyCommand nc -v -x 127.0.0.1:7890 %h %p<br>  IdentitiesOnly <span class="hljs-built_in">yes</span><br>  IdentityFile ~/.ssh/github_rsa<br></code></pre></td></tr></table></figure></li><li><p>配置好之后我们可以用<code> ssh -T git@github.com</code> 这个命令来测试一下，正常情况下会有如下响应。</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"> ~ ssh -T git@github.com<br>Connection to ssh.github.com port 443 [tcp/https] succeeded!<br>Hi Lhcnicholas! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p><code>User git</code> ：这个是固定的</p><p><code>HostName ssh.github.com</code>：在使用443端口情况下主机名为<code>ssh.github.com</code></p><p><code>Port 443</code>: 22端口有时会因为各种原因连不上，所以我们用443端口，稳一些</p><p><code>ProxyCommand nc -v -x 127.0.0.1:7890 %h %p</code>: 中间是你的代理地址，具体命令每一个参数什么意思，不用太在意（主要我自己也说不太清）</p><p><code>IdentitiesOnly yes</code>: 是否只用指定的标识文件来验证身份，不再尝试其他方式（可有可无，影响不大）</p><p><code>IdentityFile ~/.ssh/github_rsa</code>: 你的标识文件的目录地址（私钥地址，不是公钥）。</p><blockquote><p>参考：<a href="https://hellodk.cn/post/975">GitHub 加速终极教程(大佬)</a></p><p>参考：<a href="https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port">在HTTPS端口使用SSH</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Alfred Workflow获取Google Authenticator动态密码</title>
    <link href="/2023/05/09/%E5%88%A9%E7%94%A8Alfred-Workflow%E8%8E%B7%E5%8F%96Google-Authenticator%E5%8A%A8%E6%80%81%E5%AF%86%E7%A0%81/"/>
    <url>/2023/05/09/%E5%88%A9%E7%94%A8Alfred-Workflow%E8%8E%B7%E5%8F%96Google-Authenticator%E5%8A%A8%E6%80%81%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>公司的跳板机登陆需要用到Google Authenticator，每次都要掏出手机，找到App，对着密码一个一个数字敲，就很麻烦，就想着，就不能所有操作都在电脑上吗？功夫不负有心人，经过一番Google，终于找到了一个办法。</p><p>原来Google Authenticator使用的是公开的TOTP(Time-based One-Time Password)算法，而且现在已经有开源项目可以提取密钥了，那事情就简单了。</p><h2 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h2><ol><li><p>手机上通过Google Authenticator的导出功能，导出密钥对应的二维码。</p></li><li><p>使用相机或者微信去识别这个二维码，会得到一串代码，类似：otpauth-migration:&#x2F;&#x2F;offline?data&#x3D;…</p></li><li><p>使用<a href="https://github.com/scito/extract_otp_secrets">ExtractOtpSecrets</a>来提取密钥</p></li><li><p>将得到的密钥填入到workflow中。</p><p><img src="https://lhc-img.oss-cn-hangzhou.aliyuncs.com/image-20230509175720274.png" alt="image-2023050917572027"></p></li><li><p>Alfred中输入<code>gga</code>获取你的动态密码吧。</p></li></ol><p><img src="https://lhc-img.oss-cn-hangzhou.aliyuncs.com/%E6%88%AA%E5%B1%8F2023-05-09%2017.57.52.png" alt="截屏2023-05-09 17.57.5"></p><p>附：Workflow下载地址: <a href="http://lhc-app.oss-cn-hangzhou.aliyuncs.com/GoogleAuth.alfredworkflow">下载地址</a></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/362783435">https://zhuanlan.zhihu.com/p/362783435</a></p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Alfred</tag>
      
      <tag>Worflow</tag>
      
      <tag>Google Authenticator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac打不开应用，显示“文件已损坏”</title>
    <link href="/2023/05/09/mac-xattr/"/>
    <url>/2023/05/09/mac-xattr/</url>
    
    <content type="html"><![CDATA[<p>平时在网上下载的应用，由于不是在苹果商店里购买的，经常会出现抱错，“文件已损坏”。这时候就很头疼。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决办法很简单，一行命令就搞定了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo xattr -rd com.apple.quarantine &#123;&#123;file_path&#125;&#125;<br></code></pre></td></tr></table></figure><p>引用一段AI的回答。</p><blockquote><p>这是一个在MacOS上的shell命令，用于从文件或目录中删除隔离属性（quarantine attribute）。隔离属性是操作系统为从互联网下载或从其他来源接收的文件添加的一种安全措施，以防止用户意外执行可能有害的代码。<br><br>命令<code>sudo xattr -rd com.apple.quarantine &#123;&#123;file_path&#125;&#125;</code>将从指定的文件或目录中删除隔离属性，使其可以在没有任何警告或限制的情况下执行。<code>sudo</code>命令用于以管理员权限运行命令，这可能取决于文件的权限。<code>-r</code>选项用于递归地从指定目录中删除属性，<code>-d</code>选项用于从目录本身中删除属性。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Xattr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2023/04/03/My-new-Post/"/>
    <url>/2023/04/03/My-new-Post/</url>
    
    <content type="html"><![CDATA[<p>时隔多年，又开始搞博客了。</p><p>大学的时候，短暂的搞过一段时间，当时就是单纯的对自建博客这个东西很好奇。就感觉，哇，好奇妙啊，它就这么展示在了自己的眼前，太不可思议了。那是一种对于技术的好奇，而对于写博客这个事情，其实我当时并没有什么兴趣，也不知道要写些什么东西。最后也就不了了知，没几年就不再续费了，当年的代码后来也找不到了。</p><p>只是可惜了当年购买的域名，<code>niczo.com</code>, 我还挺喜欢这个域名的，简短，好记。现在想再买回来可就难了，已经在域名贩子手里了，要买回来得一两万……，一口老血吐到屏幕上。</p><p>这次多写写吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>First</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
